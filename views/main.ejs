<!DOCTYPE html>
<html lang="ko">
    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Main</title>
        <link rel="stylesheet" href="css/main.css" />
    </head>
    <body>
        <!-- <ul>
            <li>1</li>
            <li>2</li>
            <li>3</li>
        </ul> -->
        <header>
            <a href="/">
                <img src="image/logo.jpg" alt="mainLogo" class="logo" />
                <h1>ToonVerse</h1>
            </a>
            <nav>
                <ul>
                    <li id="webtoon">웹툰</li>
                    <li>커뮤니티</li>
                </ul>
            </nav>
            <div>
                <a href="">
                    <span>로그인</span>
                </a>
                <!-- <a href=""><span>로그아웃</span></a> -->
                <a href=""><span>회원가입</span></a>
            </div>
        </header>
        <div id="container">
            <div>1</div>
            <div>2</div>
            <div>3</div>
            <div>4</div>
            <div>5</div>
            <div>6</div>
            <div>7</div>
            <div>8</div>
            <div>9</div>
            <div>10</div>
        </div>

        <script>
            window.onload = function () {
                const container = document.querySelector("#container");
                document
                    .querySelector("#webtoon")
                    .addEventListener("click", () => {
                        fetch("/webtoon")
                            .then((response) => response.text())
                            .then((data) => (container.innerHTML = data));
                    });
                // // const $ul = document.querySelector("ul");
                // // let $li = document.querySelector("li:last-child");
                // // let count = $ul.children.length;
                // // // 1. 인터섹션 옵저버 생성
                // // const io = new IntersectionObserver(
                // //     (entry, observer) => {
                // //         // 3. 현재 보이는 target 출력
                // //         const ioTarget = entry[0].target;
                // //         // 4. viewport에 target이 보이면 하는 일
                // //         if (entry[0].isIntersecting) {
                // //             console.log("현재 보이는 타켓", ioTarget);
                // //             // 5. 현재 보이는 target 감시 취소해줘
                // //             io.unobserve($li);
                // //             // 6. 새로운 li 추가해
                // //             $li = $ul.appendChild(document.createElement("li"));
                // //             $li.textContent = ++count;
                // //             // 7. 새로 추가된 li 감시해!
                // //             io.observe($li);
                // //         }
                // //     },
                // //     {
                // //         // 8. 타겟이 50% 이상 보이면 해줘!
                // //         threshold: 0.5,
                // //     }
                // // );
                // // // 2. li감시해!
                // // io.observe($li);
                // const mainContainer = document.querySelector("#container");
                // let count = mainContainer.children.length;
                // let focusElement = mainContainer.lastElementChild;
                // const io = new IntersectionObserver(
                //     (entry, observer) => {
                //         const ioTarget = entry[0].target;
                //         if (entry[0].isIntersecting) {
                //             console.log("현재 보이는 타겟", ioTarget);
                //             io.unobserve(focusElement);
                //             focusElement = mainContainer.appendChild(
                //                 document.createElement("div")
                //             );
                //             focusElement.textContent = ++count;
                //             io.observe(focusElement);
                //         }
                //     },
                //     {
                //         threshold: 0,
                //     }
                // );
                // io.observe(focusElement);
            };
        </script>
    </body>
</html>
